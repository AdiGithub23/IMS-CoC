@using IMS.CoreBusiness;
@using IMS.CoreBusiness.DTO
@using IMS.UseCases.Products
@using IMS.UseCases.Products.interfaces

@inject NavigationManager NavigationManager
@inject IEditProductUseCase EditProductUseCase

@if (Products == null)
{
    <p>Loading products...</p>
}
else
{
    @foreach (var prod in Products)
    {
        <tr>
            <td><img src="@prod.ImgUrl" height="50"  /></td>
            <td>@prod.ProductName</td>
            <td>Rs. @prod.Price.ToString()</td>
            <td>@prod.Quantity</td>
           <td>
                 <input type="number" min="1" @bind-value="prod.NewQuantity" @bind-value:event="oninput" class="custom-input" />
                 <button type="button" class="btn  custom-button" onclick="@(() => UpdateQuantity(prod))">Update</button>
           </td>



            <td>
                <button type="button" class="btn edit-button" onclick="@(()=> EditProduct(prod.ProductID))">Edit Product</button>
            </td>

        </tr>
    }
}


@code {
    [Parameter]
    public List<Product> Products { get; set; } = new List<Product>();

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/editproduct/{productId}");
    }

    private async Task UpdateQuantity(Product product)
    {
        Console.WriteLine($"Updating Product ID: {product.ProductID}, Original Quantity: {product.Quantity}, Added Quantity: {product.NewQuantity}");
        product.Quantity += product.NewQuantity;
        Console.WriteLine($"Updated Quantity: {product.Quantity}");
        await EditProductUseCase.ExecuteAsync(product);
        product.NewQuantity = 0;

        // Force re-render to update the UI
        StateHasChanged();

    }
}
<style>
    .custom-input {
        width: 80px; 
        height: 40px;
    }

    .custom-button {
        width: 80px; 
        height: 40px;
        color: white;
        background-color:darkslateblue;
    }

    .edit-button {
        color: white;
        background-color: dodgerblue;
    }

</style>