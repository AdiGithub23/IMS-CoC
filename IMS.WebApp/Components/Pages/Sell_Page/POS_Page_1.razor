@page "/sellpage/{UserId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@using IMS.UseCases
@using IMS.UseCases.Activities
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products
@using IMS.UseCases.Products.interfaces
@using IMS.WebApp.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IShoppingCartService ShoppingCartService

@inject IJSRuntime JSRuntime

@* Authorization *@
@attribute [Authorize(Policy = "Sales")]

@* <h3>Sell Page for "@UserId"</h3> *@
<h3>Sales Page</h3>

<br />

<div class="page-layout">
    <div class="form-container">
@if (cartItems != null && cartItems.Any())
        {
            <EditForm Model
            ="sellViewModel" OnValidSubmit
            ="Sell" id="sell-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="po">Sell Order</label>
                    <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber" readonly></InputText>
                </div>

                <table class="table">
                    <thead>
                        <tr>
                            <th>Product Image</th>
                            <th>Product Name</th>
                            <th>Branch Qty</th>
                            <th>Qty to Sell</th>
                            <th>Price</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in cartItems)
                        {
                            <tr>
                                <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                                <td>@item.Product.ProductName</td>
                                <td>@item.Quantity</td>
                                <td>
                                    <InputNumber @bind-Value="item.QuantityToSell" class="form-control"/>
                                </td>
                                <td>@(item.Product.Price * item.QuantityToSell)</td>
                            </tr>
                        }
                    </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Sell</button>

    </EditForm>

    <button @onclick="@(() => GoTo_Cart(UserId))">Item List</button>
    }
    </div>

    <div class="receipt-container">
        @* @if (showReceipt && receiptItems.Any()) *@
        @if (showReceipt)
        {
            <div class="floating-card">
                <h4>Receipt</h4>
                <div>
                    <p>Sales Order Number: @receiptSalesOrderNumber</p>
                    <p>Sold by: @UserEmail</p>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th>Quantity Sold</th>
                                <th>Unit Price</th>
                                <th>Total Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in receiptItems)
                            {
                                <tr>
                                    <td>@item.ProductName</td>
                                    <td>@item.QuantitySold</td>
                                    <td>@item.UnitPrice</td>
                                    <td>@(item.UnitPrice * item.QuantitySold)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <button class="btn btn-secondary" @onclick="CloseReceipt">Close</button>
            </div>
        }
    </div>
</div>

<style>
    .page-layout {
        display: flex;
        justify-content: space-between;
    }

    .form-container {
        flex: 1;
        margin-right: 350px;
    }

    .receipt-container {
        flex: 1;
        position: absolute;
    }

    .floating-card {
        position: fixed;
        top: 75px;
        right: 20px;
        width: 350px;
        padding: 20px;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        z-index: 1000;
    }

        .floating-card h4 {
            margin-top: 0;
        }
</style>

@code {
    public string UserEmail = "";

    [Parameter]
    public string UserId { get; set; }
    private List<CartItemViewModel> cartItems;
    private SellViewModel sellViewModel = new SellViewModel();

    private bool showReceipt = true;
    private string receiptSalesOrderNumber = "";
    private List<ReceiptItem> receiptItems = new List<ReceiptItem>();


    protected override async Task OnInitializedAsync()
    {
        var cart = await ShoppingCartService.GetCartByUserIdAsync(UserId);
        cartItems = cart?.Items?.Select(ci => new CartItemViewModel
            {
                CartItemId = ci.CartItemId,
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                QuantityToSell = 0,
                UnitPrice = ci.Product.Price,
                Product = ci.Product
            }).ToList() ?? new List<CartItemViewModel>();

        // Generate sales order number
        sellViewModel.SalesOrderNumber = GenerateSalesOrderNumber();

    }

    private string GenerateSalesOrderNumber()
    {
        // return $"SO-{DateTime.Now:yyyyMMddHHmmss}-{UserId[0,3]}";


        var now = DateTime.Now;
        var year = now.ToString("yy"); // Last 2 digits of the year
        var month = now.ToString("MM"); // Month number
        var day = now.ToString("dd"); // Day
        var hour = now.ToString("HH"); // Hour
        var minute = now.ToString("mm"); // Minute
        // var second = now.ToString("ss"); // Second

        var branchIdPart = UserId.Length >= 3 ? UserId.Substring(0, 3) : UserId;

        return $"SO-{year}{month}{day}{hour}{minute}-{branchIdPart}";
    }      

    private async Task Sell()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        UserEmail = authState.User.Identity?.Name;

        receiptItems.Clear();
        receiptSalesOrderNumber = sellViewModel.SalesOrderNumber;

        foreach (var item in cartItems)
        {
            if (item.QuantityToSell > 0 && item.QuantityToSell <= item.Quantity)
            {
                await SellProductUseCase.ExecuteAsync(
                    sellViewModel.SalesOrderNumber,
                    item.Product,
                    item.QuantityToSell,
                    item.UnitPrice,
                    UserId, // Pass user information
                    UserEmail
                );

                item.Quantity -= item.QuantityToSell;
                if (item.Quantity <= 0)
                {
                    await ShoppingCartService.RemoveCartItemAsync(item.CartItemId);
                }
                else
                {
                    await ShoppingCartService.UpdateCartItemAsync(item.CartItemId, item.Quantity);
                }

                receiptItems.Add(new ReceiptItem
                    {
                        ProductName = item.Product.ProductName,
                        QuantitySold = item.QuantityToSell,
                        UnitPrice = item.UnitPrice
                    });

            }
        }

        // Show the receipt
        showReceipt = true;

        // Refresh the cartItems after selling
        cartItems = (await ShoppingCartService.GetCartByUserIdAsync(UserId))?.Items?.Select(ci => new CartItemViewModel
            {
                CartItemId = ci.CartItemId,
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                QuantityToSell = 0,
                UnitPrice = ci.Product.Price,
                Product = ci.Product
            }).ToList() ?? new List<CartItemViewModel>();

        // Generate a new sales order number after selling
        sellViewModel.SalesOrderNumber = GenerateSalesOrderNumber();
    }

    private void CloseReceipt()
    {
        showReceipt = false;
    }


    public async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;
        return list.Select(x => new ItemViewModel { Id = x.ProductID, Name = x.ProductName })?.ToList();
    }

    private async Task GoTo_Cart(string userId)
    {
        NavigationManager.NavigateTo($"/usercart/{userId}");
    }

    public class ReceiptItem
    {
        public string ProductName { get; set; }
        public int QuantitySold { get; set; }
        public double UnitPrice { get; set; }
    }

}
