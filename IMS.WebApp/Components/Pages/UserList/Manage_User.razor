@page "/manageuser/{UserId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@* Authorization *@
@attribute [Authorize(Policy = "Admin")]

@rendermode InteractiveServer

@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager   

<h1 class="title-text">Manage Users</h1>

@if (viewModel != null)
{
    <EditForm Model="viewModel" OnValidSubmit="SaveUser">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="email">Email</label>
            <input id="email" type="text" class="form-control" readonly value="@viewModel.Email">
        </div>
        <br />

        <div class="form-group">
            <label for="dp">Department</label>
            <select @bind="viewModel.Department" class="form-control">
                <option></option>
                <option value="Administration">Admin</option>
                <option value="Sales">Sales</option>
            </select>
        </div>
        <br />

        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>

    </EditForm>
}

@code {

    [Parameter]
    public string? UserId { get; set; }

    private IdentityUser user;
    private Claim departmentClaim;
    private bool userHadDepartment = true;
    private ManageUserViewModel viewModel;

    public class ManageUserViewModel
    {
        public string? Email { get; set; }

        [Required]
        public string Department { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        user = UserManager.Users.First(x => x.Id == this.UserId);
        var claims = await UserManager.GetClaimsAsync(user);
        departmentClaim = claims.FirstOrDefault(x => x.Type == "Department");
        if (departmentClaim == null)
        {
            userHadDepartment = false;
            departmentClaim = new Claim("Department", string.Empty);
        }

        viewModel = new ManageUserViewModel
            {
                Email = user.Email,
                Department = departmentClaim.Value
            };

    }

    private async Task SaveUser()
    {
        if (userHadDepartment)
            await UserManager.ReplaceClaimAsync(user, departmentClaim, new Claim("Department", viewModel.Department));
        else
            await UserManager.AddClaimAsync(user, new Claim("Department", viewModel.Department));

        NavigationManager.NavigateTo("/manageusers");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageusers");
    }


}

<style>
    .title-text {
        text-align: center;
        font-family: "Philosopher", sans-serif;
        font-weight: 700;
        font-style: normal;
        font-size: 40px;
        margin-bottom: 20px;
    }
</style>


<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Changa:wght@200..800&family=Philosopher:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
