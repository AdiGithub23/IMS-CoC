@page "/usercart/{UserId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using IMS.UseCases
@inject IShoppingCartService shoppingCartService

@using IMS.UseCases.PluginInterfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IProductRepository ProductRepository
@inject IShoppingCartService ShoppingCartService

@inject UserManager<IdentityUser> UserManager
@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "Sales")] *@

<CascadingAuthenticationState>

    @* <h1>Logged In User - @email</h1> *@
    @* <h1>Cart User - @UserId</h1> *@
    <h1>Branch Products</h1>

    <button type="button" class="btn btn-primary" @onclick="GoToSellPage">Go To POS</button>

    @if (cart != null && cart.Items != null && cart.Items.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Transfer Qty</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cart.Items)
                {
                    <tr>
                        <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                        <td>@item.Product.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@(item.Product.Price * item.Quantity)</td>

                        <td>
                            <input type="number" min="1" @bind="quantities[item.CartItemId]" class="form-control" />
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(() => TransferItem(item.CartItemId))">Transfer</button>
                        </td>

                        @*
                <AuthorizeView Policy="Admin">
                <Authorized>
                <td>
                <button @onclick="@(() => RemoveFromCart(item.CartItemId))">Remove</button>
                </td>
                </Authorized>
                </AuthorizeView>
                *@

                    </tr>
                }
            </tbody>
        </table>


        @if (users != null)
        {
            <div class="col-md-6">
                <label for="selectedUser">Select User:</label>
                <select @bind="selectedUserId" class="form-control">
                    <option>Select Branch</option>
                    @foreach (var user in users)
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                </select>
            </div>
        }
    }
    else
    {
        <p>Your cart is currently empty.</p>
    }

    <button type="button" class="btn btn-primary" @onclick="GoToSellPage">Go To POS</button>
    @if (!string.IsNullOrEmpty(errorMsg))
    {
        <p class="text-danger">@errorMsg</p>
    }

    @selectedUserId

</CascadingAuthenticationState>

@code {
    [Parameter]
    public string UserId { get; set; }
    private string? email;
    private Cart? cart;
    private List<CartItem> cartitems;


    private string selectedUserId;
    private List<IdentityUser>? users;
    private string errorMsg = "";
    private Dictionary<int, int> quantities = new Dictionary<int, int>();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        email = authState.User.Identity?.Name;

        try
        {
            users = UserManager.Users.ToList();
        }
        catch (Exception ex)
        {
            errorMsg = $"Error retrieving users: {ex.Message}";
        }

        cart = await shoppingCartService.GetCartByUserIdAsync(UserId);
        cartitems = cart?.Items?.ToList() ?? new List<CartItem>();


        foreach (var item in cartitems)
        {
            quantities[item.CartItemId] = 0; // or any default value you prefer
        }
    }

    private async Task TransferItem(int cartItemId)
    {
        if (selectedUserId == null)
        {
            errorMsg = "No User is Selected!";
            return;
        }

        if (!quantities.TryGetValue(cartItemId, out var selectedQuantity) || selectedQuantity <= 0)
        {
            errorMsg = "Please enter a valid quantity to transfer.";
            return;
        }

        try
        {
            // Implement the actual transfer logic here using your shoppingCartService
            // await shoppingCartService.AddItemToCartAsync(selectedUserId, cartItemId, selectedQuantity);
            await shoppingCartService.TransferItemsAsync(UserId, selectedUserId, cartItemId, selectedQuantity);


            // Update quantities and display success message
            errorMsg = $"{selectedQuantity} item(s) transferred to {selectedUserId}'s cart.";
            quantities[cartItemId] = 0; // Reset quantity after transfer
        }
        catch (Exception ex)
        {
            // Handle any exceptions that might occur during the transfer
            errorMsg = $"Error transferring items: {ex.Message}";
        }
    }

    private async Task RemoveFromCart(int cartItemId)
    {
        await shoppingCartService.RemoveCartItemAsync(cartItemId);
    }

    private void GoToSellPage()
    {
        NavigationManager.NavigateTo($"/sellpage/{UserId}");
    }

}

