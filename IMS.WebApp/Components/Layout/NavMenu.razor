@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Cake O' Clock'</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @* @if (isAdmin)
        { *@
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="identity/account/register">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Register Branch
                </NavLink>
            </div>
        @* } *@

        @* @if (isAdmin)
        { *@
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="products">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Products
                </NavLink>
            </div>
        @* } *@

        @* @if (isAdmin)
        { *@
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="branchproduct">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Products to Branch
                </NavLink>
            </div>
        @* } *@


        <div class="nav-item px-3">
            <NavLink class="nav-link" href="@GetCartUrl()">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Branch Products
            </NavLink>
        </div>
@* 
        <AuthorizeView Policy="Sales">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@GetSellPageUrl()">
                        <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Branch POS
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView> *@

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="@GetSellPageUrl()">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Branch POS
            </NavLink>
        </div>
        

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="bpreport_2">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Products Report
            </NavLink>
        </div>

        @* @if (isAdmin)
        { *@
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="productreport">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Sales Report
                </NavLink>
            </div>
        @* } *@

        @* @if (isAdmin)
        { *@
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="manageusers">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Branch Authorization
                </NavLink>
            </div>
        @* } *@



    </nav>
</div>

@code {

    private string UserId;
    private bool isAdmin = false;


    // private bool isBrnch = false;
    private bool UserIsInRole(ClaimsPrincipal user, string role)
    {
        return user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == role);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);


        var user = authState.User;

        isAdmin = UserIsInRole(user, "Admin");
        // isAdmin = user.IsInRole("Admin");
        // isBrnch = UserIsInRole(user, "Sales");
    }

    private string GetCartUrl()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            return "#";
        }
        return $"/usercart/{UserId}";
    }

    private string GetSellPageUrl()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            return "#";
        }
        return $"/sellpage/{UserId}";
    }
}